AWSTemplateFormatVersion: '2010-09-09'
Description: VoxPopAI Fargate cluster (ALB, backend + frontend)

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  EcrBackendImage:
    Type: String
    Description: ECR URI for backend image (e.g. 123456789012.dkr.ecr.ap-southeast-2.amazonaws.com/voxpopai-backend:latest)
  EcrFrontendImage:
    Type: String
    Description: ECR URI for frontend image (e.g. 123456789012.dkr.ecr.ap-southeast-2.amazonaws.com/voxpopai-frontend:latest)
  CognitoPoolId:
    Type: String
  CognitoAppClientId:
    Type: String

Resources:
  # IAM roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: ecs-tasks.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: ecs-tasks.amazonaws.com}
            Action: sts:AssumeRole

  # Log groups
  LogGroupBackend:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/voxpopai-backend
      RetentionInDays: 14

  LogGroupFrontend:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/voxpopai-frontend
      RetentionInDays: 14

  # Security groups
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from Internet
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB to reach tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  # ALB and listeners
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets
      SecurityGroups: [!Ref AlbSecurityGroup]

  TgBackend:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip

  TgFrontend:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip

  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TgFrontend

  ListenerRuleBackend:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener80
      Priority: 10
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values: ["/api/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TgBackend

  # ECS
  Cluster:
    Type: AWS::ECS::Cluster

  TaskDefBackend:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Ref EcrBackendImage
          PortMappings: [{ContainerPort: 8000}]
          Environment:
            - {Name: COGNITO_REGION, Value: ap-southeast-2}
            - {Name: COGNITO_POOL_ID, Value: !Ref CognitoPoolId}
            - {Name: COGNITO_APP_CLIENT_ID, Value: !Ref CognitoAppClientId}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupBackend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  TaskDefFrontend:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref EcrFrontendImage
          PortMappings: [{ContainerPort: 3000}]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupFrontend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ServiceBackend:
    Type: AWS::ECS::Service
    DependsOn: Listener80
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefBackend
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ServiceSecurityGroup]
          Subnets: !Ref PublicSubnets
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !Ref TgBackend

  ServiceFrontend:
    Type: AWS::ECS::Service
    DependsOn: Listener80
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefFrontend
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ServiceSecurityGroup]
          Subnets: !Ref PublicSubnets
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: !Ref TgFrontend

Outputs:
  AlbDNS:
    Description: Public load-balancer DNS
    Value: !GetAtt LoadBalancer.DNSName

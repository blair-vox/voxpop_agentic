AWSTemplateFormatVersion: '2010-09-09'
Description: VoxPopAI Fargate cluster with CloudFront for HTTPS

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  EcrBackendImage:
    Type: String
    Description: ECR URI for backend image
  EcrFrontendImage:
    Type: String
    Description: ECR URI for frontend image
  CognitoPoolId:
    Type: String
  CognitoAppClientId:
    Type: String
  CognitoDomain:
    Type: String
    Default: https://ap-southeast-2ofbo55m16.auth.ap-southeast-2.amazoncognito.com
  CognitoClientIdFrontend:
    Type: String
  CognitoPoolIdFrontend:
    Type: String

Resources:
  # IAM roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: ecs-tasks.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/voxpopai/*

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: ecs-tasks.amazonaws.com}
            Action: sts:AssumeRole

  # Log groups
  LogGroupBackend:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/voxpop-backend-cloudfront
      RetentionInDays: 14

  LogGroupFrontend:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/voxpop-frontend-cloudfront
      RetentionInDays: 14

  # Security groups
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from CloudFront
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB to reach tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  # ALB
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets
      SecurityGroups: [!Ref AlbSecurityGroup]

  TgBackend:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /api/health

  TgFrontend:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /

  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TgFrontend

  ListenerRuleBackend:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener80
      Priority: 10
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values: ["/api/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TgBackend

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: VoxPopAI HTTPS Distribution
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: true
            Headers: [Authorization, Origin, Access-Control-Request-Method, Access-Control-Request-Headers]
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: ALBOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            Compress: false
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin
            ForwardedValues:
              QueryString: true
              Headers: [Authorization, Origin, Access-Control-Request-Method, Access-Control-Request-Headers]
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt LoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # ECS
  Cluster:
    Type: AWS::ECS::Cluster

  TaskDefBackend:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Ref EcrBackendImage
          Essential: true
          Command: ["python", "-m", "uvicorn", "voxpopai.backend.app:app", "--host", "0.0.0.0", "--port", "8000"]
          PortMappings: [{ContainerPort: 8000}]
          Environment:
            - {Name: COGNITO_REGION, Value: ap-southeast-2}
            - {Name: COGNITO_POOL_ID, Value: !Ref CognitoPoolId}
            - {Name: COGNITO_APP_CLIENT_ID, Value: !Ref CognitoAppClientId}
          Secrets:
            - Name: OPENAI_API_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/voxpopai/openai-api-key
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupBackend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  TaskDefFrontend:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref EcrFrontendImage
          Essential: true
          PortMappings: [{ContainerPort: 3000}]
          Environment:
            - Name: NEXT_PUBLIC_COGNITO_DOMAIN
              Value: !Ref CognitoDomain
            - Name: NEXT_PUBLIC_COGNITO_CLIENT_ID
              Value: !Ref CognitoClientIdFrontend
            - Name: NEXT_PUBLIC_COGNITO_POOL_ID
              Value: !Ref CognitoPoolIdFrontend
            - Name: NEXT_PUBLIC_BACKEND_URL
              Value: !Sub "https://${CloudFrontDistribution.DomainName}/api"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupFrontend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ServiceBackend:
    Type: AWS::ECS::Service
    DependsOn: Listener80
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefBackend
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ServiceSecurityGroup]
          Subnets: !Ref PublicSubnets
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !Ref TgBackend

  ServiceFrontend:
    Type: AWS::ECS::Service
    DependsOn: Listener80
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefFrontend
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ServiceSecurityGroup]
          Subnets: !Ref PublicSubnets
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: !Ref TgFrontend

Outputs:
  CloudFrontURL:
    Description: CloudFront HTTPS URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  AlbDNS:
    Description: ALB DNS (internal use)
    Value: !GetAtt LoadBalancer.DNSName 